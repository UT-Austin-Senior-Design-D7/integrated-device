/*
  Rui Santos
  Complete project details at https://RandomNerdTutorials.com/esp32-cam-post-image-photo-server/
  
  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files.
  
  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.
*/

#include <Arduino.h>
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "soc/soc.h"
#include "soc/rtc_cntl_reg.h"
#include "esp_camera.h"
#include <Adafruit_GFX.h>    // Core graphics library
#include <Adafruit_ST7735.h> // Hardware-specific library
#include <SPI.h>

#if (defined(__AVR__))
#include <avr\pgmspace.h>
#else
#include <pgmspace.h>
#endif

#define echoPin 13 // attach pin D19 Arduino to pin Echo of HC-SR04
#define trigPin 15 //attach pin D22 Arduino to pin Trig of HC-SR04

// For the breakout, you can use any 2 or 3 pins
// These pins will also work for the 1.8" TFT shield
#define TFT_CS     21 // plug into 21
#define TFT_RST    12  // you can also connect this to the Arduino reset
                      // in which case, set this #define pin to 0!
#define TFT_DC     33 // changed from 14

//Adafruit_ST7735 tft = Adafruit_ST7735(TFT_CS,  TFT_DC, TFT_RST);

// Option 2: use any pins but a little slower!
#define TFT_SCLK 14   // set these to be whatever pins you like! from 18
#define TFT_MOSI 32   // set these to be whatever pins you like! from 23
Adafruit_ST7735 tft = Adafruit_ST7735(TFT_CS, TFT_DC, TFT_MOSI, TFT_SCLK, TFT_RST);

static const unsigned char IWB8012[]PROGMEM = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x30, 0x00, 0xc6, 0x30, 0x00, 0x18, 0x00, 0x1f, 0xcc, 0x00, 
0x00, 0x00, 0xc6, 0x20, 0x00, 0x18, 0x00, 0x18, 0xc0, 0x00, 
0x24, 0xc0, 0x4e, 0x63, 0x83, 0x1c, 0x20, 0x18, 0xc8, 0xb0, 
0x37, 0xe0, 0x6f, 0x66, 0xcd, 0x9c, 0xf8, 0x1f, 0x8d, 0xf8, 
0x36, 0x60, 0x6b, 0x64, 0x4c, 0x19, 0x8c, 0x1f, 0xcd, 0x88, 
0x36, 0x20, 0x79, 0xc7, 0xc7, 0x99, 0xfc, 0x18, 0xcd, 0x88, 
0x36, 0x20, 0x39, 0xcc, 0x40, 0xd9, 0x80, 0x18, 0x6d, 0x88, 
0x36, 0x20, 0x39, 0xcc, 0xcc, 0xdc, 0xd8, 0x1f, 0xcd, 0x88, 
0x36, 0x20, 0x31, 0x87, 0xc7, 0x8e, 0x70, 0x1f, 0x8d, 0x88, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
  
static const unsigned char waste7221[]PROGMEM = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x78, 0x1c, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x38, 0x3c, 0x0e, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 
0x38, 0x3e, 0x1e, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 
0x38, 0x3e, 0x1c, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 
0x3c, 0x3e, 0x1c, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 
0x1c, 0x7e, 0x1c, 0x1f, 0x80, 0xfc, 0x3f, 0xc1, 0xe0, 
0x1c, 0x77, 0x1c, 0x7f, 0xe1, 0xfe, 0x3f, 0xc7, 0xf8, 
0x1c, 0x77, 0x38, 0x70, 0xe3, 0x87, 0x0e, 0x0f, 0x3c, 
0x0e, 0x67, 0x38, 0xe0, 0xe3, 0x83, 0x0e, 0x1c, 0x1c, 
0x0e, 0xe3, 0x38, 0x00, 0xe3, 0xe0, 0x0e, 0x1c, 0x0e, 
0x0e, 0xe3, 0xb8, 0x1f, 0xe1, 0xfe, 0x0e, 0x1f, 0xfe, 
0x0f, 0xe3, 0xf0, 0x7e, 0xe0, 0x7f, 0x0e, 0x1f, 0xfe, 
0x07, 0xc3, 0xf0, 0xf0, 0xe0, 0x07, 0x8e, 0x1c, 0x00, 
0x07, 0xc1, 0xf0, 0xe0, 0xe3, 0x83, 0x8e, 0x1c, 0x0c, 
0x07, 0xc1, 0xe0, 0xe1, 0xe3, 0x87, 0x8f, 0x8f, 0x3c, 
0x07, 0xc1, 0xe0, 0x7f, 0xe1, 0xff, 0x0f, 0xc7, 0xf8, 
0x03, 0x81, 0xe0, 0x3c, 0xe0, 0x7c, 0x03, 0xc1, 0xe0, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

static const unsigned char PL7020[]PROGMEM = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x3f, 0xf0, 0xe0, 0x00, 0x00, 0x02, 0x0c, 0x00, 0x00, 
0x3f, 0xf8, 0xe0, 0x00, 0x00, 0x07, 0x0c, 0x00, 0x00, 
0x3c, 0x3c, 0xe0, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 
0x38, 0x1c, 0xe0, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 
0x38, 0x1c, 0xe0, 0xf8, 0x1f, 0x1f, 0xcc, 0x0f, 0x00, 
0x38, 0x1c, 0xe3, 0xfc, 0x3f, 0x8f, 0xcc, 0x3f, 0xc0, 
0x3c, 0x38, 0xe7, 0x0e, 0x71, 0xc7, 0x0c, 0x78, 0xe0, 
0x3f, 0xf8, 0xe0, 0x0e, 0x70, 0x07, 0x0c, 0x70, 0x00, 
0x3f, 0xe0, 0xe0, 0xfe, 0x7f, 0x07, 0x0c, 0x60, 0x00, 
0x3c, 0x00, 0xe3, 0xfe, 0x1f, 0xc7, 0x0c, 0x60, 0x00, 
0x38, 0x00, 0xe7, 0x0e, 0x01, 0xc7, 0x0c, 0x70, 0xe0, 
0x38, 0x00, 0xe7, 0x0e, 0x60, 0xc7, 0x0c, 0x70, 0xe0, 
0x38, 0x00, 0xe7, 0x1e, 0x71, 0xc7, 0xcc, 0x3f, 0xc0, 
0x3c, 0x00, 0xe3, 0xfe, 0x3f, 0x83, 0xcc, 0x1f, 0x80, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00  
};

static const unsigned char MT5420[]PROGMEM = {
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x1e, 0x03, 0x80, 0x00, 0x00, 0x00, 0x60, 
0x1e, 0x07, 0x80, 0x00, 0xc0, 0x00, 0x60, 
0x1f, 0x07, 0x80, 0x00, 0xc0, 0x00, 0x60, 
0x1f, 0x0f, 0x80, 0x00, 0xc0, 0x00, 0x60, 
0x1f, 0x0f, 0x81, 0xc3, 0xf0, 0x60, 0x60, 
0x1f, 0x8d, 0x87, 0xe3, 0xf1, 0xfc, 0x60, 
0x19, 0x8d, 0x8e, 0x70, 0xc3, 0x0c, 0x60, 
0x1d, 0x99, 0x8c, 0x18, 0xc3, 0x0c, 0x60, 
0x1d, 0xd9, 0x8f, 0xf8, 0xc0, 0x7c, 0x60, 
0x1c, 0xf9, 0x8f, 0xf8, 0xc3, 0xfc, 0x60, 
0x1c, 0xf1, 0x8c, 0x00, 0xc7, 0x0c, 0x60, 
0x1c, 0xf1, 0x8e, 0x38, 0xc7, 0x0c, 0x60, 
0x1c, 0x71, 0x87, 0xf0, 0xf3, 0xfc, 0x60, 
0x1c, 0x61, 0xc3, 0xe0, 0x71, 0xec, 0x60, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

static const unsigned char CB10920[]PROGMEM = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x07, 0xf0, 0x00, 0x00, 0x00, 0x06, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 
0x0f, 0xfc, 0x00, 0x00, 0x00, 0x06, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 
0x1e, 0x3c, 0x00, 0x00, 0x00, 0x06, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 
0x1c, 0x0e, 0x00, 0x00, 0x00, 0x06, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 
0x38, 0x0e, 0x1f, 0x87, 0x31, 0xf6, 0x33, 0xc0, 0x7c, 0x07, 0xe1, 0xcc, 0x7b, 0x80, 
0x38, 0x00, 0x3f, 0xc7, 0xf3, 0xfe, 0x3f, 0xe0, 0xff, 0x0f, 0xf1, 0xfc, 0xff, 0x80, 
0x38, 0x00, 0x70, 0xe7, 0xe7, 0x8e, 0x3c, 0xf1, 0xc7, 0x1c, 0x39, 0xf9, 0xe7, 0x80, 
0x38, 0x00, 0x00, 0xe7, 0x87, 0x0e, 0x38, 0x73, 0x83, 0x80, 0x39, 0xe1, 0xc3, 0x80, 
0x38, 0x06, 0x0f, 0xe7, 0x06, 0x06, 0x30, 0x33, 0x83, 0x83, 0xf9, 0xc1, 0x81, 0x80, 
0x38, 0x0e, 0x3f, 0xe7, 0x06, 0x06, 0x30, 0x33, 0x83, 0x8f, 0xf9, 0xc1, 0x81, 0x80, 
0x1c, 0x0e, 0x70, 0xe7, 0x07, 0x06, 0x30, 0x73, 0x83, 0x9c, 0x39, 0xc1, 0x83, 0x80, 
0x1e, 0x3c, 0x60, 0xe7, 0x07, 0x0e, 0x38, 0x71, 0xc3, 0x98, 0x39, 0xc1, 0xc3, 0x80, 
0x0f, 0xf8, 0x71, 0xe7, 0x03, 0xfe, 0x3f, 0xe1, 0xff, 0x1c, 0x79, 0xc0, 0xff, 0x80, 
0x07, 0xf0, 0x3f, 0xe7, 0x01, 0xf6, 0x37, 0xc0, 0xfe, 0x0f, 0xf9, 0xc0, 0x7d, 0x80, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

static const unsigned char IR5712[]PROGMEM = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x60, 0x07, 0xc0, 0x00, 0x00, 0x68, 0x00, 0x00, 
0x00, 0x04, 0x40, 0x00, 0x00, 0x60, 0x00, 0x00, 
0x6f, 0x04, 0x4e, 0x7b, 0x6f, 0x6b, 0xef, 0x80, 
0x69, 0x07, 0x9b, 0x41, 0x48, 0x6b, 0x29, 0x80, 
0x69, 0x04, 0xd8, 0x41, 0xc8, 0x6b, 0x28, 0x80, 
0x69, 0x04, 0x5b, 0x69, 0xcb, 0x6b, 0x2d, 0x80, 
0x69, 0x04, 0x46, 0x30, 0x86, 0x6b, 0x27, 0x80, 
0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x0d, 0x80, 
0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x07, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

static const unsigned char PPI7410[]PROGMEM = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x3c, 0x80, 0x00, 0x00, 0x1e, 0x00, 0x04, 0x00, 0x00, 0x00, 
0x36, 0x80, 0x00, 0x00, 0x1b, 0x01, 0x86, 0xc0, 0x00, 0x00, 
0x22, 0x8c, 0x73, 0x8c, 0x11, 0x65, 0xc6, 0xec, 0x53, 0x00, 
0x3e, 0x92, 0x9a, 0x52, 0x1f, 0x65, 0x86, 0x9b, 0x4d, 0x00, 
0x3c, 0x9e, 0x7b, 0x9f, 0x1e, 0x65, 0x86, 0xdf, 0x49, 0x00, 
0x20, 0x90, 0x98, 0xd0, 0x18, 0x6d, 0x86, 0xd0, 0x49, 0x00, 
0x20, 0xdc, 0xfb, 0x8e, 0x18, 0x3c, 0xc6, 0xee, 0x49, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

static const unsigned char wave[]PROGMEM = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x18, 0x63, 0x80, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x07, 0x00, 0x01, 0x98, 0x00, 0x00, 0x40, 0x00, 
0x18, 0xe3, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x07, 0x80, 0x01, 0x80, 0x00, 0x00, 0xe0, 0x00, 
0x0c, 0xf3, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x07, 0x80, 0x03, 0x80, 0x00, 0x00, 0xe0, 0x00, 
0x0c, 0xf3, 0x3f, 0x31, 0x8f, 0x01, 0xf3, 0xe0, 0x0d, 0x83, 0xe7, 0xd9, 0x8c, 0xfd, 0xf1, 0xe0, 
0x0d, 0xb3, 0x33, 0xb1, 0x99, 0x80, 0xc6, 0x30, 0x0c, 0xc7, 0x31, 0x99, 0x89, 0x8c, 0x43, 0x30, 
0x0d, 0x96, 0x03, 0x9b, 0x30, 0xc0, 0xc6, 0x30, 0x18, 0xc6, 0x01, 0x98, 0x98, 0x0c, 0xe6, 0x18, 
0x07, 0x9e, 0x3f, 0x9b, 0x3f, 0xc0, 0xc6, 0x18, 0x1f, 0xe6, 0x01, 0x98, 0xd8, 0xfc, 0xe7, 0xf8, 
0x07, 0x9e, 0x71, 0x9f, 0x30, 0x00, 0xc6, 0x30, 0x1f, 0xe6, 0x11, 0x98, 0xf1, 0x8c, 0xe6, 0x00, 
0x07, 0x1c, 0x63, 0x8e, 0x19, 0x80, 0xe6, 0x70, 0x30, 0x67, 0x31, 0x98, 0x71, 0x8c, 0xe3, 0x30, 
0x07, 0x0c, 0x3f, 0x8e, 0x0f, 0x00, 0xf3, 0xe0, 0x30, 0x33, 0xe1, 0xd8, 0x71, 0xfc, 0x71, 0xe0, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

static const unsigned char process[]PROGMEM = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x0f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 
0x1f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 
0x1c, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x1c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x1c, 0x3b, 0x63, 0xe0, 0xf8, 0x7c, 0x3f, 0x1f, 0x8c, 0xde, 0x1e, 0xc0, 
0x1c, 0x73, 0xe6, 0x71, 0xcc, 0xe6, 0x73, 0x99, 0xcc, 0xe6, 0x3b, 0xc0, 
0x1f, 0xf3, 0x8c, 0x3b, 0x80, 0xc3, 0x70, 0x38, 0x0c, 0xc7, 0x30, 0xc0, 
0x1f, 0x83, 0x0c, 0x1b, 0x00, 0xff, 0x3f, 0x1f, 0x8c, 0xc7, 0x30, 0xc0, 
0x1c, 0x03, 0x0c, 0x1b, 0x04, 0xc0, 0x03, 0x81, 0xcc, 0xc7, 0x30, 0xc0, 
0x1c, 0x03, 0x06, 0x31, 0x8c, 0xc3, 0x61, 0xb0, 0xcc, 0xc7, 0x31, 0xc0, 
0x1c, 0x03, 0x07, 0xf1, 0xf8, 0x7e, 0x3f, 0x1f, 0x8c, 0xc7, 0x3f, 0xc0, 
0x0c, 0x03, 0x01, 0xc0, 0x70, 0x18, 0x0c, 0x06, 0x0c, 0xc2, 0x0c, 0xc0, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0xc0, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x80, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};


static const unsigned char bin28[]PROGMEM = {
0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x0c, 0x00, 
0x00, 0x0f, 0xfc, 0x00, 
0x03, 0xff, 0xc0, 0x00, 
0x03, 0xf0, 0x00, 0x00, 
0x03, 0xff, 0xfc, 0x00, 
0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 
0x03, 0xff, 0xfc, 0x00, 
0x00, 0x00, 0x00, 0x00, 
0x01, 0xff, 0xf8, 0x00, 
0x01, 0xff, 0xf8, 0x00, 
0x00, 0x00, 0x00, 0x00, 
0x01, 0xff, 0xf8, 0x00, 
0x01, 0xff, 0xf8, 0x00, 
0x00, 0x00, 0x00, 0x00, 
0x01, 0xff, 0xf8, 0x00, 
0x00, 0xff, 0xf8, 0x00, 
0x00, 0x00, 0x00, 0x00, 
0x00, 0xff, 0xf0, 0x00, 
0x00, 0xff, 0xf0, 0x00, 
0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00
};

static const unsigned char cam[]PROGMEM = {
0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 
0x00, 0x0f, 0xc0, 0x00, 
0x00, 0x18, 0x61, 0x80, 
0x00, 0x3c, 0xf1, 0x80, 
0x0f, 0xff, 0xff, 0xc0, 
0x0f, 0xff, 0xff, 0xc0, 
0x0f, 0xfc, 0xff, 0xc0, 
0x0f, 0xf2, 0x3f, 0xc0, 
0x0f, 0xec, 0x1f, 0xc0, 
0x0f, 0xe8, 0x1f, 0xc0, 
0x0f, 0xe0, 0x1f, 0xc0, 
0x0f, 0xe0, 0x1f, 0xc0, 
0x0f, 0xe0, 0x1f, 0xc0, 
0x0f, 0xf0, 0x3f, 0xc0, 
0x0f, 0xf8, 0x7f, 0xc0, 
0x0f, 0xff, 0xff, 0xc0, 
0x0f, 0xff, 0xff, 0xc0, 
0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00
};

static const unsigned char bin115[]PROGMEM = {
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xc3, 0xff, 0xff, 0xff, 0xff, 0xdf, 0xff, 0xff, 0xff, 0xe0, 
0xff, 0xff, 0xff, 0xff, 0xc0, 0x03, 0xff, 0xff, 0xff, 0xff, 0xdf, 0xff, 0xff, 0xff, 0xe0, 
0xff, 0xff, 0xff, 0xc0, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xdf, 0xff, 0xff, 0xff, 0xe0, 
0xff, 0xff, 0x80, 0x00, 0x00, 0x01, 0xff, 0xf3, 0xcf, 0xe3, 0xdf, 0xbc, 0x7f, 0xff, 0xe0, 
0xff, 0xc0, 0x00, 0x00, 0x00, 0x3f, 0xff, 0x8c, 0x37, 0xdc, 0xdf, 0x7b, 0x9f, 0xff, 0xe0, 
0xff, 0xc0, 0x00, 0x00, 0x3f, 0xff, 0xff, 0x9e, 0x7b, 0xbe, 0xde, 0xf7, 0xdf, 0xff, 0xe0, 
0xff, 0xc0, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xbe, 0xfb, 0xbe, 0xdd, 0xf7, 0xef, 0xff, 0xe0, 
0xff, 0xc0, 0x3f, 0xff, 0xff, 0xff, 0xff, 0x9e, 0xfb, 0xfc, 0xfb, 0xef, 0xef, 0xff, 0xe0, 
0xff, 0xe0, 0x00, 0x00, 0x00, 0x01, 0xff, 0x9e, 0xfb, 0x86, 0xe5, 0xe0, 0x1f, 0xff, 0xe0, 
0xff, 0xe0, 0x00, 0x00, 0x00, 0x01, 0xff, 0x9e, 0xfb, 0xbe, 0xee, 0xef, 0xff, 0xff, 0xe0, 
0xff, 0xe0, 0x00, 0x00, 0x00, 0x01, 0xff, 0x9e, 0xfb, 0x7e, 0xdf, 0x77, 0xef, 0xff, 0xe0, 
0xff, 0xe0, 0x00, 0x00, 0x00, 0x03, 0xff, 0x9e, 0xfb, 0xbc, 0xdf, 0x37, 0xdf, 0xff, 0xe0, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfb, 0x9f, 0xff, 0xbb, 0xbf, 0xff, 0xe0, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 
0xff, 0xe0, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 
0xff, 0xe0, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 
0xff, 0xe0, 0x00, 0x00, 0x00, 0x03, 0xff, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 
0xff, 0xe0, 0x00, 0x00, 0x00, 0x03, 0xff, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9e, 0x1f, 0x87, 0xc1, 0xff, 0xff, 0xff, 0xe0, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xf7, 0xff, 0x9d, 0xef, 0x7b, 0x9c, 0xff, 0xff, 0xff, 0xe0, 
0xff, 0xf0, 0x00, 0x00, 0x00, 0x07, 0xff, 0x9b, 0xf7, 0x7d, 0xbe, 0xff, 0xff, 0xff, 0xe0, 
0xff, 0xf0, 0x00, 0x00, 0x00, 0x07, 0xff, 0x9b, 0xf7, 0x7f, 0xbf, 0xff, 0xff, 0xff, 0xe0, 
0xff, 0xf0, 0x00, 0x00, 0x00, 0x07, 0xff, 0x98, 0x17, 0x9f, 0xc7, 0xff, 0xff, 0xff, 0xe0, 
0xff, 0xf8, 0x00, 0x00, 0x00, 0x07, 0xff, 0x9b, 0xff, 0xe3, 0xf9, 0xff, 0xff, 0xff, 0xe0, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9b, 0xff, 0xfd, 0xfe, 0xff, 0xff, 0xff, 0xe0, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9b, 0xf6, 0xfd, 0xbe, 0xff, 0xff, 0xff, 0xe0, 
0xff, 0xf8, 0x00, 0x00, 0x00, 0x0f, 0xff, 0x9d, 0xef, 0x79, 0x9e, 0xff, 0xff, 0xff, 0xe0, 
0xff, 0xf8, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xfe, 0x1f, 0x83, 0xc9, 0xff, 0xff, 0xff, 0xe0, 
0xff, 0xf8, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 
0xff, 0xf8, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf7, 0xff, 0xff, 0xe0, 
0xff, 0xfc, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf7, 0xff, 0xff, 0xe0, 
0xff, 0xf8, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xfe, 0xff, 0xc3, 0xe0, 0xe1, 0xe1, 0xff, 0xe0, 
0xff, 0xf8, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xde, 0x7b, 0xbd, 0xce, 0x77, 0xdc, 0xff, 0xe0, 
0xff, 0xfc, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xdf, 0x7b, 0x3f, 0xdf, 0x77, 0xbe, 0xff, 0xe0, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xdd, 0x7b, 0xff, 0xdf, 0xf7, 0xbf, 0x7f, 0xe0, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfd, 0xb7, 0xe1, 0xe3, 0xf7, 0x80, 0x7f, 0xe0, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xed, 0xb7, 0xbf, 0xfc, 0xf7, 0xbf, 0xff, 0xe0, 
0xff, 0xfc, 0x00, 0x00, 0x00, 0x18, 0xff, 0xeb, 0xb7, 0x7f, 0xff, 0x77, 0xbf, 0xff, 0xe0, 
0xff, 0xfc, 0x00, 0x00, 0x00, 0x17, 0x7f, 0xeb, 0xcf, 0x7d, 0xdf, 0x77, 0xbe, 0x7f, 0xe0, 
0xff, 0xfc, 0x00, 0x00, 0x00, 0x17, 0x7f, 0xf3, 0xcf, 0x79, 0xdf, 0x73, 0xde, 0xff, 0xe0, 
0xff, 0xfc, 0x00, 0x00, 0x00, 0x1a, 0xff, 0xf7, 0xcf, 0x86, 0xe0, 0xf9, 0xe1, 0xff, 0xe0, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0
};

static const unsigned char bin110[]PROGMEM = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xfc, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xfc, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

void startup() {
  tft.fillScreen(0xFFFF);
  tft.fillRect(0, 0, 128, 40, 0x1CDA);
  tft.fillRect(0, 116, 128, 44, 0x1CDA);
  tft.fillRect(0, 40, 6, 76, 0x1CDA);
  tft.fillRect(121, 40, 7, 76, 0x1CDA);
  tft.drawBitmap(6, 40, bin115, 115, 76, 0x1CDA);
  delay(1500);
  tft.fillScreen(0x1CDA);
}

void waitscreen(){
  //tft.fillScreen(0x1CDA);
  tft.drawBitmap(7, 50, bin110, 110, 110, 0xFFFF);
  tft.drawBitmap(0, 10, wave, 128, 19, 0xFFFF);
  
}

void waved(){
  tft.fillRect(0, 10, 128, 19, 0x1CDA);
  tft.drawBitmap(48, 10, cam, 30, 30, 0xFFFF);
  delay(4000);
  tft.fillRect(48, 10, 30, 30, 0x1CDA);
  delay(90);
  tft.drawBitmap(48, 10, cam, 30, 30, 0xFFFF);
  tft.fillRect(48, 10, 30, 30, 0x1CDA);
  delay(50);
  tft.drawBitmap(48, 10, cam, 30, 30, 0xFFFF);
}

void processing(){
  delay(200);
  tft.fillRect(48, 10, 30, 30, 0x1CDA);
  tft.drawBitmap(10, 20, process, 93, 20, 0xFFFF);
}
void prowait(){
  tft.fillRect(105, 33, 3, 3, 0xFFFF);
  delay(800);
  tft.fillRect(111, 33, 3, 3, 0xFFFF);
  delay(800);
  tft.fillRect(117, 33, 3, 3, 0xFFFF);
  delay(800);
  tft.fillRect(105, 33, 3, 3, 0x1CDA);
  tft.fillRect(111, 33, 3, 3, 0x1CDA);
  tft.fillRect(117, 33, 3, 3, 0x1CDA);
}

void results(int n){
  tft.fillRect(10, 20, 93, 20, 0x1CDA);
  switch(n)
{
  case 1:
      tft.drawBitmap(7, 50, bin110, 110, 110, 0x0FA0);
      tft.drawBitmap(10, 20, CB10920, 109, 20, 0xFFFF);
      tft.drawBitmap(10, 40, PPI7410, 74, 10, 0xFFFF);
      tft.drawBitmap(30, 50, IR5712, 57, 12, 0xFFFF);
      break;
  case 2:
      tft.drawBitmap(7, 50, bin110, 110, 110, 0x0FA0);
      tft.drawBitmap(30, 20, PL7020, 70, 20, 0xFFFF);
      tft.drawBitmap(18, 40, PPI7410, 74, 10, 0xFFFF);
      tft.drawBitmap(38, 50, IR5712, 57, 12, 0xFFFF);
      break;
  case 3:
      tft.drawBitmap(7, 50, bin110, 110, 110, 0x0FA0);
      tft.drawBitmap(33, 20, MT5420, 54, 20, 0xFFFF);
      tft.drawBitmap(18, 40, PPI7410, 74, 10, 0xFFFF);
      tft.drawBitmap(38, 50, IR5712, 57, 12, 0xFFFF);
      break;
  default:
      tft.drawBitmap(7, 50, bin110, 110, 110, 0xA333);
      tft.drawBitmap(20, 20, waste7221, 72, 21, 0xFFFF);
      tft.drawBitmap(15, 40, PPI7410, 74, 10, 0xFFFF);
      tft.drawBitmap(35, 50, IWB8012, 80, 12, 0xFFFF);
      break;
}
  //Texts for three options
  //"Discard in _______
}



long duration; // variable for the duration of sound wave travel
int distance; // variable for the distance measurement

const char* ssid = "iphone"; //ATTGBRTTna
const char* password = "password1"; //9hwnxu=w%2a=

#define CAMERA_MODEL_WROVER_KIT // Has PSRAM

#include "camera_pins.h"

//String serverName = "192.168.1.XXX";   // REPLACE WITH YOUR Raspberry Pi IP ADDRESS
String serverName = "binitdatabase.tk";   // OR REPLACE WITH YOUR DOMAIN NAME // http://seniordesignd7photouploads.com/ //binitdatabase.tk

String serverPath = "/upload/1";     // The default serverPath should be upload.php // 

const int serverPort = 443; //443 //80

WiFiClientSecure client;


const int timerInterval = 30000;    // time between each HTTP POST image
unsigned long previousMillis = 0;   // last time image was sent

void setup() {
  //WRITE_PERI_REG(RTC_CNTL_BROWN_OUT_REG, 0); 
  Serial.begin(9600);

  pinMode(trigPin, OUTPUT); // Sets the trigPin as an OUTPUT
  pinMode(echoPin, INPUT); // Sets the echoPin as an INPUT
    
  // Use this initializer if you're using a 1.8" TFT
  tft.initR(INITR_BLACKTAB);   // initialize a ST7735S chip, black tab
  tft.invertDisplay(false);

  Serial.println("Initialized");

  tft.fillScreen(ST7735_BLACK);

  delay(2000);

  startup();

  client.setInsecure();  

  WiFi.mode(WIFI_STA);
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);
  WiFi.begin(ssid, password);  
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    delay(500);
  }
  Serial.println();
  Serial.print("ESP32-CAM IP Address: ");
  Serial.println(WiFi.localIP());

  camera_config_t config;
  config.ledc_channel = LEDC_CHANNEL_0;
  config.ledc_timer = LEDC_TIMER_0;
  config.pin_d0 = Y2_GPIO_NUM;
  config.pin_d1 = Y3_GPIO_NUM;
  config.pin_d2 = Y4_GPIO_NUM;
  config.pin_d3 = Y5_GPIO_NUM;
  config.pin_d4 = Y6_GPIO_NUM;
  config.pin_d5 = Y7_GPIO_NUM;
  config.pin_d6 = Y8_GPIO_NUM;
  config.pin_d7 = Y9_GPIO_NUM;
  config.pin_xclk = XCLK_GPIO_NUM;
  config.pin_pclk = PCLK_GPIO_NUM;
  config.pin_vsync = VSYNC_GPIO_NUM;
  config.pin_href = HREF_GPIO_NUM;
  config.pin_sscb_sda = SIOD_GPIO_NUM;
  config.pin_sscb_scl = SIOC_GPIO_NUM;
  config.pin_pwdn = PWDN_GPIO_NUM;
  config.pin_reset = RESET_GPIO_NUM;
  config.xclk_freq_hz = 20000000;
  config.pixel_format = PIXFORMAT_JPEG;

  // init with high specs to pre-allocate larger buffers
  if(psramFound()){
    config.frame_size = FRAMESIZE_SVGA;
    config.jpeg_quality = 10;  //0-63 lower number means higher quality
    config.fb_count = 2;
  } else {
    config.frame_size = FRAMESIZE_CIF;
    config.jpeg_quality = 12;  //0-63 lower number means higher quality
    config.fb_count = 1;
  }
  
  // camera init
  esp_err_t err = esp_camera_init(&config);
  if (err != ESP_OK) {
    Serial.printf("Camera init failed with error 0x%x", err);
    delay(1000);
    ESP.restart();
  }



  //sendPhoto(); 
}

void loop() {
  waitscreen();
  // Clears the trigPin condition
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  // Sets the trigPin HIGH (ACTIVE) for 10 microseconds
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  // Reads the echoPin, returns the sound wave travel time in microseconds
  duration = pulseIn(echoPin, HIGH);
  // Calculating the distance
  distance = duration * 0.034 / 2; // Speed of sound wave divided by 2 (go and back)
  Serial.println(distance);
  if(distance < 10){
    delay(500);
    // Clears the trigPin condition
    digitalWrite(trigPin, LOW);
    delayMicroseconds(2);
    // Sets the trigPin HIGH (ACTIVE) for 10 microseconds
    digitalWrite(trigPin, HIGH);
    delayMicroseconds(10);
    digitalWrite(trigPin, LOW);
    // Reads the echoPin, returns the sound wave travel time in microseconds
    duration = pulseIn(echoPin, HIGH);
    // Calculating the distance
    distance = duration * 0.034 / 2; // Speed of sound wave divided by 2 (go and back)
    if(distance < 10){
      waved();
      unsigned long currentMillis = millis();
      if (currentMillis - previousMillis >= timerInterval) {
        processing();
        sendPhoto();
        previousMillis = currentMillis;
      }
    }
    else{
     waitscreen();
    }
  }
  else{
    waitscreen();
  }
  

}

String sendPhoto() {
  String getAll;
  String getBody;
  String forDisplay;

  camera_fb_t * fb = NULL;
  fb = esp_camera_fb_get();
  if(!fb) {
    Serial.println("Camera capture failed");
    delay(1000);
    ESP.restart();
  }
  
  Serial.println("Connecting to server: " + serverName);

  if (client.connect(serverName.c_str(), serverPort)) {
    Serial.println("Connection successful!");    
    String head = "--RandomNerdTutorials\r\nContent-Disposition: form-data; name=\"file\"; filename=\"esp32-cam.jpg\"\r\nContent-Type: image/jpeg\r\n\r\n";
    String tail = "\r\n--RandomNerdTutorials--\r\n";

    uint32_t imageLen = fb->len;
    uint32_t extraLen = head.length() + tail.length();
    uint32_t totalLen = imageLen + extraLen;
  
    client.println("POST " + serverPath + " HTTP/1.1");
    client.println("Host: " + serverName);
    client.println("Content-Length: " + String(totalLen));
    client.println("Content-Type: multipart/form-data; boundary=RandomNerdTutorials");
    client.println();
    client.print(head);

    Serial.println("POST " + serverPath + " HTTP/1.1");
    Serial.println("Host: " + serverName);
    Serial.println("Content-Length: " + String(totalLen));
    Serial.println("Content-Type: multipart/form-data; boundary=RandomNerdTutorials");
    Serial.println();
    Serial.print(head);

  
    uint8_t *fbBuf = fb->buf;
    size_t fbLen = fb->len;
    for (size_t n=0; n<fbLen; n=n+1024) {
      if (n+1024 < fbLen) {
        client.write(fbBuf, 1024);
        fbBuf += 1024;
      }
      else if (fbLen%1024>0) {
        size_t remainder = fbLen%1024;
        client.write(fbBuf, remainder);
      }
    }   
    client.print(tail);
    
    esp_camera_fb_return(fb);

    prowait();
    
    int timoutTimer = 20000;
    long startTimer = millis();
    boolean state = false;
    
    while ((startTimer + timoutTimer) > millis()) {
      Serial.print(".");
      delay(100);      
      while (client.available()) {
        char c = client.read();
        if (c == '\n') {
          if (getAll.length()==0) { state=true; }
          getAll = "";
        }
        else if (c != '\r') { getAll += String(c); }
        if (state==true) { getBody += String(c); }
        startTimer = millis();
      }
      if (getBody.length()>0) { break; }
    }
    Serial.println();
    client.stop();
    Serial.println(getBody);
    forDisplay = getBody;
    forDisplay.remove(0,20);
    Serial.println(forDisplay);
    if(forDisplay.startsWith("cardboard")|| forDisplay.startsWith("paper")){
      results(1);
    }
    else if(forDisplay.startsWith("plastic") || forDisplay.startsWith("glass")){
      results(2);
    }
    else if(forDisplay.startsWith("metal")){
      results(3);
    }
    else{
      results(4);
    }
  }
  else {
    getBody = "Connection to " + serverName +  " failed.";
    Serial.println(getBody);
  }
  delay(6000);
  tft.fillScreen(0x1CDA);
  return getBody;
}
